#!/usr/bin/python

from __future__ import print_function

import networkx as nx

import argparse
import random
import subprocess
import time

nodes = set()
edges = []


g = nx.read_dot('graph.gv')

def parse():
  short = {}
  count = 0

  for e in nx.edges(g):
    
    src = e[0]
    dst = e[1]

    if src not in short: 
      short[src] = count
      count = count + 1
    
    if dst not in short: 
      short[dst] = count
      count = count + 1
    
    src = short[src]
    dst = short[dst]

    nodes.add( src )
    nodes.add( dst )
    edges.append( [src, dst] )

  for n in nx.get_node_attributes(g, 'name'):
    nodes.add( n )


def execute(command, interval = 0):
  process = subprocess.Popen(command, shell=True, 
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)
  process.wait()
  if process.returncode is not 0: print('Error.')
  time.sleep(interval)
  return process



def connect(parsed_args):
 
  parse()

  for e in edges:
    patch_src = 'patch-sw%s-sw%s' %(e[0], e[1])
    patch_dst = 'patch-sw%s-sw%s' %(e[1], e[0])

    command = 'ovs-vsctl -- \
    add-port sw%s p-sw%s-sw%s -- \
    add-port sw%s p-sw%s-sw%s -- \
    set Interface p-sw%s-sw%s type=patch options:peer=p-sw%s-sw%s -- \
    set Interface p-sw%s-sw%s type=patch options:peer=p-sw%s-sw%s' % (
    e[0], e[0], e[1],
    e[1], e[1], e[0],
    e[0], e[1], e[1], e[0],
    e[1], e[0], e[0], e[1],
    )

    print_line = 'patching sw%s sw%s' %(e[0], e[1])
    print(print_line)
    execute(command)


def create(parsed_args):

  parse()

  for n in nodes:
    command = 'ovs-vsctl add-br sw%s' %(n)
    print_line = 'creating sw%s' %(n)
    print(print_line)
    execute(command)

    command = '/sbin/ifconfig sw%s up' %(n)
    execute(command)

    command = 'ovs-vsctl set-controller sw%s tcp:127.0.0.1' %(n)
    print_line = 'bouding sw%s to tcp:127.0.0.1' %(n)
    print(print_line)
    execute(command)



def flush(parsed_args):

  cmd = 'ovs-vsctl list-br'
  p = execute(cmd)
  for line in p.stdout.read().split('\n'):
    if line.strip():
      rm_cmd = 'ovs-vsctl del-br %s' %( line )
      print_line = 'destroying %s' %( line )
      print(print_line)
      execute(rm_cmd)


parser = argparse.ArgumentParser()

parser.add_argument('--flush', dest='action', action='store_const', const=flush)
parser.add_argument('--create', dest='action', action='store_const', const=create)
parser.add_argument('--connect', dest='action', action='store_const', const=connect)
parser.add_argument('--woop')
parser.add_argument('--moop')

parsed_args = parser.parse_args()
if parsed_args.action is None:
    parser.parse_args(['-h'])
parsed_args.action(parsed_args)

