// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPC_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RPC_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Topology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Topology_reflection_ = NULL;
const ::google::protobuf::Descriptor* PacketInRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketInRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PacketInResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketInResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReceive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_interface_2eproto() {
  protobuf_AddDesc_interface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "interface.proto");
  GOOGLE_CHECK(file != NULL);
  RPC_descriptor_ = file->message_type(0);
  static const int RPC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPC, type_),
  };
  RPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPC_descriptor_,
      RPC::default_instance_,
      RPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPC, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPC, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPC));
  RPC_Type_descriptor_ = RPC_descriptor_->enum_type(0);
  InitRequest_descriptor_ = file->message_type(1);
  static const int InitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, ism_),
  };
  InitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitRequest_descriptor_,
      InitRequest::default_instance_,
      InitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitRequest));
  InitResponse_descriptor_ = file->message_type(2);
  static const int InitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, domain_),
  };
  InitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitResponse_descriptor_,
      InitResponse::default_instance_,
      InitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitResponse));
  Topology_descriptor_ = file->message_type(3);
  static const int Topology_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, dot_),
  };
  Topology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Topology_descriptor_,
      Topology::default_instance_,
      Topology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Topology));
  PacketInRequest_descriptor_ = file->message_type(4);
  static const int PacketInRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInRequest, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInRequest, srcv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInRequest, packet_),
  };
  PacketInRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PacketInRequest_descriptor_,
      PacketInRequest::default_instance_,
      PacketInRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PacketInRequest));
  PacketInResponse_descriptor_ = file->message_type(5);
  static const int PacketInResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInResponse, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInResponse, srcv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInResponse, dstv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInResponse, match_),
  };
  PacketInResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PacketInResponse_descriptor_,
      PacketInResponse::default_instance_,
      PacketInResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketInResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PacketInResponse));
  DataPush_descriptor_ = file->message_type(6);
  static const int DataPush_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPush, srcv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPush, dstv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPush, data_),
  };
  DataPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataPush_descriptor_,
      DataPush::default_instance_,
      DataPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataPush));
  DataReceive_descriptor_ = file->message_type(7);
  static const int DataReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceive, srcv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceive, data_),
  };
  DataReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataReceive_descriptor_,
      DataReceive::default_instance_,
      DataReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataReceive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_interface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPC_descriptor_, &RPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitRequest_descriptor_, &InitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitResponse_descriptor_, &InitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Topology_descriptor_, &Topology::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PacketInRequest_descriptor_, &PacketInRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PacketInResponse_descriptor_, &PacketInResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataPush_descriptor_, &DataPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataReceive_descriptor_, &DataReceive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_interface_2eproto() {
  delete RPC::default_instance_;
  delete RPC_reflection_;
  delete InitRequest::default_instance_;
  delete InitRequest_reflection_;
  delete InitResponse::default_instance_;
  delete InitResponse_reflection_;
  delete Topology::default_instance_;
  delete Topology_reflection_;
  delete PacketInRequest::default_instance_;
  delete PacketInRequest_reflection_;
  delete PacketInResponse::default_instance_;
  delete PacketInResponse_reflection_;
  delete DataPush::default_instance_;
  delete DataPush_reflection_;
  delete DataReceive::default_instance_;
  delete DataReceive_reflection_;
}

void protobuf_AddDesc_interface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017interface.proto\"\254\001\n\003RPC\022\027\n\004type\030\001 \002(\0162"
    "\t.RPC.Type\"\201\001\n\004Type\022\017\n\013InitRequest\020\001\022\020\n\014"
    "InitResponse\020\002\022\014\n\010Topology\020\003\022\023\n\017PacketIn"
    "Request\020\004\022\024\n\020PacketInResponse\020\005\022\014\n\010DataP"
    "ush\020\006\022\017\n\013DataReceive\020\007*\010\010e\020\200\200\200\200\002\";\n\013Init"
    "Request\022\013\n\003ism\030\001 \002(\t2\037\n\003msg\022\004.RPC\030e \002(\0132"
    "\014.InitRequest\"@\n\014InitResponse\022\016\n\006domain\030"
    "\001 \002(\0042 \n\003msg\022\004.RPC\030f \002(\0132\r.InitResponse\""
    "5\n\010Topology\022\013\n\003dot\030\001 \002(\t2\034\n\003msg\022\004.RPC\030g "
    "\002(\0132\t.Topology\"d\n\017PacketInRequest\022\016\n\006coo"
    "kie\030\001 \002(\r\022\014\n\004srcV\030\002 \002(\r\022\016\n\006packet\030\003 \002(\0142"
    "#\n\003msg\022\004.RPC\030h \002(\0132\020.PacketInRequest\"s\n\020"
    "PacketInResponse\022\016\n\006cookie\030\001 \002(\r\022\014\n\004srcV"
    "\030\002 \002(\r\022\014\n\004dstV\030\003 \002(\r\022\r\n\005match\030\004 \002(\0142$\n\003m"
    "sg\022\004.RPC\030i \002(\0132\021.PacketInResponse\"R\n\010Dat"
    "aPush\022\014\n\004srcV\030\001 \002(\003\022\014\n\004dstV\030\002 \002(\003\022\014\n\004dat"
    "a\030\003 \002(\0142\034\n\003msg\022\004.RPC\030j \002(\0132\t.DataPush\"J\n"
    "\013DataReceive\022\014\n\004srcV\030\001 \002(\003\022\014\n\004data\030\002 \002(\014"
    "2\037\n\003msg\022\004.RPC\030k \002(\0132\014.DataReceive", 753);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "interface.proto", &protobuf_RegisterTypes);
  RPC::default_instance_ = new RPC();
  InitRequest::default_instance_ = new InitRequest();
  InitResponse::default_instance_ = new InitResponse();
  Topology::default_instance_ = new Topology();
  PacketInRequest::default_instance_ = new PacketInRequest();
  PacketInResponse::default_instance_ = new PacketInResponse();
  DataPush::default_instance_ = new DataPush();
  DataReceive::default_instance_ = new DataReceive();
  RPC::default_instance_->InitAsDefaultInstance();
  InitRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::RPC::default_instance(),
    101, 11, false, false,
    &::InitRequest::default_instance());
  InitResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::RPC::default_instance(),
    102, 11, false, false,
    &::InitResponse::default_instance());
  Topology::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::RPC::default_instance(),
    103, 11, false, false,
    &::Topology::default_instance());
  PacketInRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::RPC::default_instance(),
    104, 11, false, false,
    &::PacketInRequest::default_instance());
  PacketInResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::RPC::default_instance(),
    105, 11, false, false,
    &::PacketInResponse::default_instance());
  DataPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::RPC::default_instance(),
    106, 11, false, false,
    &::DataPush::default_instance());
  DataReceive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::RPC::default_instance(),
    107, 11, false, false,
    &::DataReceive::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_interface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_interface_2eproto {
  StaticDescriptorInitializer_interface_2eproto() {
    protobuf_AddDesc_interface_2eproto();
  }
} static_descriptor_initializer_interface_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* RPC_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPC_Type_descriptor_;
}
bool RPC_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RPC_Type RPC::InitRequest;
const RPC_Type RPC::InitResponse;
const RPC_Type RPC::Topology;
const RPC_Type RPC::PacketInRequest;
const RPC_Type RPC::PacketInResponse;
const RPC_Type RPC::DataPush;
const RPC_Type RPC::DataReceive;
const RPC_Type RPC::Type_MIN;
const RPC_Type RPC::Type_MAX;
const int RPC::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RPC::kTypeFieldNumber;
#endif  // !_MSC_VER

RPC::RPC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPC::InitAsDefaultInstance() {
}

RPC::RPC(const RPC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPC::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPC::~RPC() {
  SharedDtor();
}

void RPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPC_descriptor_;
}

const RPC& RPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();  return *default_instance_;
}

RPC* RPC::default_instance_ = NULL;

RPC* RPC::New() const {
  return new RPC;
}

void RPC::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RPC.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RPC_Type_IsValid(value)) {
            set_type(static_cast< ::RPC_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((808u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RPC.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // Extension range [101, 536870912)
  _extensions_.SerializeWithCachedSizes(
      101, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RPC.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // Extension range [101, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      101, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RPC.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPC::MergeFrom(const RPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPC::CopyFrom(const RPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void RPC::Swap(RPC* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata RPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPC_descriptor_;
  metadata.reflection = RPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitRequest::kIsmFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int InitRequest::kMsgFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::RPC,
    ::google::protobuf::internal::MessageTypeTraits< ::InitRequest >, 11, false >
  InitRequest::msg(kMsgFieldNumber, ::InitRequest::default_instance());
InitRequest::InitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitRequest::InitAsDefaultInstance() {
}

InitRequest::InitRequest(const InitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitRequest::SharedCtor() {
  _cached_size_ = 0;
  ism_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitRequest::~InitRequest() {
  SharedDtor();
}

void InitRequest::SharedDtor() {
  if (ism_ != &::google::protobuf::internal::kEmptyString) {
    delete ism_;
  }
  if (this != default_instance_) {
  }
}

void InitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitRequest_descriptor_;
}

const InitRequest& InitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();  return *default_instance_;
}

InitRequest* InitRequest::default_instance_ = NULL;

InitRequest* InitRequest::New() const {
  return new InitRequest;
}

void InitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ism()) {
      if (ism_ != &::google::protobuf::internal::kEmptyString) {
        ism_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ism = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ism()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ism().data(), this->ism().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ism = 1;
  if (has_ism()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ism().data(), this->ism().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ism(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ism = 1;
  if (has_ism()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ism().data(), this->ism().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ism(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ism = 1;
    if (has_ism()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ism());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitRequest::MergeFrom(const InitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ism()) {
      set_ism(from.ism());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRequest::CopyFrom(const InitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InitRequest::Swap(InitRequest* other) {
  if (other != this) {
    std::swap(ism_, other->ism_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitRequest_descriptor_;
  metadata.reflection = InitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitResponse::kDomainFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int InitResponse::kMsgFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::RPC,
    ::google::protobuf::internal::MessageTypeTraits< ::InitResponse >, 11, false >
  InitResponse::msg(kMsgFieldNumber, ::InitResponse::default_instance());
InitResponse::InitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitResponse::InitAsDefaultInstance() {
}

InitResponse::InitResponse(const InitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitResponse::SharedCtor() {
  _cached_size_ = 0;
  domain_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitResponse::~InitResponse() {
  SharedDtor();
}

void InitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitResponse_descriptor_;
}

const InitResponse& InitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();  return *default_instance_;
}

InitResponse* InitResponse::default_instance_ = NULL;

InitResponse* InitResponse::New() const {
  return new InitResponse;
}

void InitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    domain_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &domain_)));
          set_has_domain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->domain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 domain = 1;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->domain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->domain());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitResponse::MergeFrom(const InitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitResponse::CopyFrom(const InitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InitResponse::Swap(InitResponse* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitResponse_descriptor_;
  metadata.reflection = InitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Topology::kDotFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Topology::kMsgFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::RPC,
    ::google::protobuf::internal::MessageTypeTraits< ::Topology >, 11, false >
  Topology::msg(kMsgFieldNumber, ::Topology::default_instance());
Topology::Topology()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Topology::InitAsDefaultInstance() {
}

Topology::Topology(const Topology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Topology::SharedCtor() {
  _cached_size_ = 0;
  dot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Topology::~Topology() {
  SharedDtor();
}

void Topology::SharedDtor() {
  if (dot_ != &::google::protobuf::internal::kEmptyString) {
    delete dot_;
  }
  if (this != default_instance_) {
  }
}

void Topology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Topology_descriptor_;
}

const Topology& Topology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();  return *default_instance_;
}

Topology* Topology::default_instance_ = NULL;

Topology* Topology::New() const {
  return new Topology;
}

void Topology::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dot()) {
      if (dot_ != &::google::protobuf::internal::kEmptyString) {
        dot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Topology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dot().data(), this->dot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Topology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dot = 1;
  if (has_dot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dot().data(), this->dot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Topology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dot = 1;
  if (has_dot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dot().data(), this->dot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Topology::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dot = 1;
    if (has_dot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dot());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Topology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Topology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Topology::MergeFrom(const Topology& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dot()) {
      set_dot(from.dot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Topology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topology::CopyFrom(const Topology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Topology::Swap(Topology* other) {
  if (other != this) {
    std::swap(dot_, other->dot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Topology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Topology_descriptor_;
  metadata.reflection = Topology_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PacketInRequest::kCookieFieldNumber;
const int PacketInRequest::kSrcVFieldNumber;
const int PacketInRequest::kPacketFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PacketInRequest::kMsgFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::RPC,
    ::google::protobuf::internal::MessageTypeTraits< ::PacketInRequest >, 11, false >
  PacketInRequest::msg(kMsgFieldNumber, ::PacketInRequest::default_instance());
PacketInRequest::PacketInRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PacketInRequest::InitAsDefaultInstance() {
}

PacketInRequest::PacketInRequest(const PacketInRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PacketInRequest::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = 0u;
  srcv_ = 0u;
  packet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketInRequest::~PacketInRequest() {
  SharedDtor();
}

void PacketInRequest::SharedDtor() {
  if (packet_ != &::google::protobuf::internal::kEmptyString) {
    delete packet_;
  }
  if (this != default_instance_) {
  }
}

void PacketInRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketInRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketInRequest_descriptor_;
}

const PacketInRequest& PacketInRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();  return *default_instance_;
}

PacketInRequest* PacketInRequest::default_instance_ = NULL;

PacketInRequest* PacketInRequest::New() const {
  return new PacketInRequest;
}

void PacketInRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cookie_ = 0u;
    srcv_ = 0u;
    if (has_packet()) {
      if (packet_ != &::google::protobuf::internal::kEmptyString) {
        packet_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PacketInRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookie_)));
          set_has_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcV;
        break;
      }
      
      // required uint32 srcV = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcv_)));
          set_has_srcv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packet;
        break;
      }
      
      // required bytes packet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PacketInRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cookie(), output);
  }
  
  // required uint32 srcV = 2;
  if (has_srcv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcv(), output);
  }
  
  // required bytes packet = 3;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->packet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PacketInRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cookie = 1;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cookie(), target);
  }
  
  // required uint32 srcV = 2;
  if (has_srcv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcv(), target);
  }
  
  // required bytes packet = 3;
  if (has_packet()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->packet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PacketInRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookie());
    }
    
    // required uint32 srcV = 2;
    if (has_srcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcv());
    }
    
    // required bytes packet = 3;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->packet());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketInRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PacketInRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PacketInRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PacketInRequest::MergeFrom(const PacketInRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_srcv()) {
      set_srcv(from.srcv());
    }
    if (from.has_packet()) {
      set_packet(from.packet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PacketInRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketInRequest::CopyFrom(const PacketInRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketInRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PacketInRequest::Swap(PacketInRequest* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(srcv_, other->srcv_);
    std::swap(packet_, other->packet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PacketInRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketInRequest_descriptor_;
  metadata.reflection = PacketInRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PacketInResponse::kCookieFieldNumber;
const int PacketInResponse::kSrcVFieldNumber;
const int PacketInResponse::kDstVFieldNumber;
const int PacketInResponse::kMatchFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PacketInResponse::kMsgFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::RPC,
    ::google::protobuf::internal::MessageTypeTraits< ::PacketInResponse >, 11, false >
  PacketInResponse::msg(kMsgFieldNumber, ::PacketInResponse::default_instance());
PacketInResponse::PacketInResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PacketInResponse::InitAsDefaultInstance() {
}

PacketInResponse::PacketInResponse(const PacketInResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PacketInResponse::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = 0u;
  srcv_ = 0u;
  dstv_ = 0u;
  match_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketInResponse::~PacketInResponse() {
  SharedDtor();
}

void PacketInResponse::SharedDtor() {
  if (match_ != &::google::protobuf::internal::kEmptyString) {
    delete match_;
  }
  if (this != default_instance_) {
  }
}

void PacketInResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketInResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketInResponse_descriptor_;
}

const PacketInResponse& PacketInResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();  return *default_instance_;
}

PacketInResponse* PacketInResponse::default_instance_ = NULL;

PacketInResponse* PacketInResponse::New() const {
  return new PacketInResponse;
}

void PacketInResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cookie_ = 0u;
    srcv_ = 0u;
    dstv_ = 0u;
    if (has_match()) {
      if (match_ != &::google::protobuf::internal::kEmptyString) {
        match_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PacketInResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookie_)));
          set_has_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcV;
        break;
      }
      
      // required uint32 srcV = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcv_)));
          set_has_srcv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dstV;
        break;
      }
      
      // required uint32 dstV = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstv_)));
          set_has_dstv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_match;
        break;
      }
      
      // required bytes match = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_match()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PacketInResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cookie(), output);
  }
  
  // required uint32 srcV = 2;
  if (has_srcv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcv(), output);
  }
  
  // required uint32 dstV = 3;
  if (has_dstv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dstv(), output);
  }
  
  // required bytes match = 4;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->match(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PacketInResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cookie = 1;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cookie(), target);
  }
  
  // required uint32 srcV = 2;
  if (has_srcv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcv(), target);
  }
  
  // required uint32 dstV = 3;
  if (has_dstv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dstv(), target);
  }
  
  // required bytes match = 4;
  if (has_match()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->match(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PacketInResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookie());
    }
    
    // required uint32 srcV = 2;
    if (has_srcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcv());
    }
    
    // required uint32 dstV = 3;
    if (has_dstv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstv());
    }
    
    // required bytes match = 4;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->match());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketInResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PacketInResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PacketInResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PacketInResponse::MergeFrom(const PacketInResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_srcv()) {
      set_srcv(from.srcv());
    }
    if (from.has_dstv()) {
      set_dstv(from.dstv());
    }
    if (from.has_match()) {
      set_match(from.match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PacketInResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketInResponse::CopyFrom(const PacketInResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketInResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PacketInResponse::Swap(PacketInResponse* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(srcv_, other->srcv_);
    std::swap(dstv_, other->dstv_);
    std::swap(match_, other->match_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PacketInResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketInResponse_descriptor_;
  metadata.reflection = PacketInResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataPush::kSrcVFieldNumber;
const int DataPush::kDstVFieldNumber;
const int DataPush::kDataFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int DataPush::kMsgFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::RPC,
    ::google::protobuf::internal::MessageTypeTraits< ::DataPush >, 11, false >
  DataPush::msg(kMsgFieldNumber, ::DataPush::default_instance());
DataPush::DataPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataPush::InitAsDefaultInstance() {
}

DataPush::DataPush(const DataPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataPush::SharedCtor() {
  _cached_size_ = 0;
  srcv_ = GOOGLE_LONGLONG(0);
  dstv_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataPush::~DataPush() {
  SharedDtor();
}

void DataPush::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DataPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPush_descriptor_;
}

const DataPush& DataPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();  return *default_instance_;
}

DataPush* DataPush::default_instance_ = NULL;

DataPush* DataPush::New() const {
  return new DataPush;
}

void DataPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcv_ = GOOGLE_LONGLONG(0);
    dstv_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 srcV = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcv_)));
          set_has_srcv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstV;
        break;
      }
      
      // required int64 dstV = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dstv_)));
          set_has_dstv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 srcV = 1;
  if (has_srcv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->srcv(), output);
  }
  
  // required int64 dstV = 2;
  if (has_dstv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dstv(), output);
  }
  
  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 srcV = 1;
  if (has_srcv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->srcv(), target);
  }
  
  // required int64 dstV = 2;
  if (has_dstv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dstv(), target);
  }
  
  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataPush::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 srcV = 1;
    if (has_srcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcv());
    }
    
    // required int64 dstV = 2;
    if (has_dstv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dstv());
    }
    
    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataPush::MergeFrom(const DataPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcv()) {
      set_srcv(from.srcv());
    }
    if (from.has_dstv()) {
      set_dstv(from.dstv());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPush::CopyFrom(const DataPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void DataPush::Swap(DataPush* other) {
  if (other != this) {
    std::swap(srcv_, other->srcv_);
    std::swap(dstv_, other->dstv_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataPush_descriptor_;
  metadata.reflection = DataPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataReceive::kSrcVFieldNumber;
const int DataReceive::kDataFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int DataReceive::kMsgFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::RPC,
    ::google::protobuf::internal::MessageTypeTraits< ::DataReceive >, 11, false >
  DataReceive::msg(kMsgFieldNumber, ::DataReceive::default_instance());
DataReceive::DataReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataReceive::InitAsDefaultInstance() {
}

DataReceive::DataReceive(const DataReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataReceive::SharedCtor() {
  _cached_size_ = 0;
  srcv_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReceive::~DataReceive() {
  SharedDtor();
}

void DataReceive::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DataReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReceive_descriptor_;
}

const DataReceive& DataReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();  return *default_instance_;
}

DataReceive* DataReceive::default_instance_ = NULL;

DataReceive* DataReceive::New() const {
  return new DataReceive;
}

void DataReceive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcv_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 srcV = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcv_)));
          set_has_srcv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 srcV = 1;
  if (has_srcv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->srcv(), output);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 srcV = 1;
  if (has_srcv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->srcv(), target);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataReceive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 srcV = 1;
    if (has_srcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcv());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataReceive::MergeFrom(const DataReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcv()) {
      set_srcv(from.srcv());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReceive::CopyFrom(const DataReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DataReceive::Swap(DataReceive* other) {
  if (other != this) {
    std::swap(srcv_, other->srcv_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReceive_descriptor_;
  metadata.reflection = DataReceive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
